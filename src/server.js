// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
const express = require('express'); // Express main module
const telegramBot = require('node-telegram-bot-api'); // Telegram bot module
const download = require('download-file'); // –ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ URL
const url = require('url'); // URL parse module
const fetch = require('node-fetch') // –ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ URL && –≤–∑—è—Ç—å –∏–º—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
var cors = require('cors') // —Å–æ–µ–¥–µ–Ω–∏—Ç—å vue –∏ node

const app = express() // Express init
app.use(cors())

const token = '725276890:AAEYgA9L2BA68p_ki5L9HVfcGouxsfmbKio'; // Token –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ @ToTakeURL_bot

const bot = new telegramBot(token, { // –ó–∞–ø–∏—à–µ–º –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–º—É
  polling: true // –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä–∞—Ç—å—Å—è –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ—à–∏–±–æ–∫
});

function linkToChat() { // –§—É–Ω–∫—Ü–∏—è c–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞ —Å —á–∞—Ç–æ–º
  bot.sendMessage(-276583637, '–†–∞–±–æ—Ç—è–≥–∞ john –≤—ã—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É'); // –û—Ç–ø—Ä–∞–≤–∏–º –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç
}
linkToChat();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
let userOption = [];                // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–æ–≤
let historyArr = [];          // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
let userList = [];
let rating = [];
let ratingController = {};



function canUserVote(user, date) { // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
  if (!ratingController[user]) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª —Ç–æ –ø—É—Å—Ç—å –≥–æ–ª–æ—Å—É–µ—Ç
    console.log("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª");
    return true
  } else if (ratingController[user].lastMessage + 1 <= date) { // –ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ n —Å–µ–∫—É–Ω–¥ —Ç–æ –ø—É—Å—Ç—å –≥–æ–ª–æ—Å—É–µ—Ç –µ—â–µ
    console.log("–í—ã —Å–º–æ–≥–ª–∏ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å");
    return true
  } else {
    console.log("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ—â—ë –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", ratingController[user].lastMessage + 1 - date, "—Å–µ–∫—É–Ω–¥"); // –ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    return false // –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–æ n —Å–µ–∫—É–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
  }
}

function uniqUser(userId) {
  for (let i = 0; i < userList.length; i++) {
    if (userList[i].id === userId) {
      return false
    }
  }
  return true
}



bot.onText(/.+/, function(msg) { // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —á–∞—Ç–µ
  let answer = msg.reply_to_message
  let conditions1 = answer && msg.from.id != answer.from.id // (—É—Å–ª–æ–≤–∏–µ)–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å –∏ –≤–∞—à id != id –æ—Ç–≤–µ—Ç–∞
  let textLowerCase = msg.text.toLowerCase()
  let userId = msg.from.id

  if (uniqUser(msg.from.id)) {
    userList.push({
      id: msg.from.id,
      name: msg.from.first_name,
      username: (msg.from.username) ? msg.from.username : "",
      emotions: msg.text+= msg.text
    })
  }


  if (conditions1) {
    const pushParams = {
      first_name: msg.from.first_name,
      last_name: msg.from.last_name,
      date: msg.date,
      reply_first_name: answer.from.first_name,
      reply_last_name: answer.from.last_name,
      reply_message: answer.text,
      msg_text: msg.text,
      answer_id: answer.from.id,
      answer_name: answer.from.first_name
    }
    let ratingInfo = {}
      if ((msg.text === "+" || textLowerCase === "—Å–ø–∞—Å–∏–±–æ" || textLowerCase === "—Å–ø—Å" || msg.text === "üëç") && canUserVote(userId, msg.date)) {
        pushParams.emotions = '1',
        ratingInfo = {answer_id : answer.from.id ,answer_name: answer.from.first_name , emotions:pushParams.emotions }
        userOption.push(ratingInfo )
      }
      if ((msg.text === "-" || textLowerCase === "–¥–∏–∑–ª–∞–π–∫" || textLowerCase === "–Ω–µ—Ç" || msg.text === "üëé") && canUserVote(userId, msg.date)) {
        pushParams.emotions = '-1',
        ratingInfo = {answer_id : answer.from.id ,answer_name: answer.from.first_name , emotions:pushParams.emotions}
        userOption.push(ratingInfo )
      }

      if(pushParams.emotions){
        historyArr.push(pushParams)
        ratingController[userId] = { // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—å–µ–∫—Ç–∞
          lastMessage: msg.date
        }

      }
  }
})






function groupVotesByUser (userOption) {  //—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  return userOption.reduce(function (summary, vote) {
      const {answer_id, emotions} = vote;   // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ      https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
      if(summary[answer_id] === undefined) summary[answer_id] = 0;
      summary[answer_id] += emotions == 1 ? 1 : -1;
      return summary; // –≤–µ—Ä–Ω–µ–º —Å—É–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }, {}) // –û–±—å—è–≤–ª—è–µ–º –æ–±—å–µ–∫—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ reduce
}


let resultHistoryArr

bot.onText(/\/history/, function showHistory(msg) {
  resultHistoryArr = ''

  for (let i = 0; i < historyArr.length; i++) {
    resultHistoryArr += ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + historyArr[i].first_name + ' ' + historyArr[i].last_name + " –æ—Ü–µ–Ω–∏–ª –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + historyArr[i].reply_first_name + ':' + '` ' + historyArr[i].reply_message +
      ' ` ' + '\n–æ—Ü–µ–Ω–∫–æ–π: ' + historyArr[i].emotions + " –≤ " + new Date(historyArr[i].date * 1000).getHours() + " —á–∞—Å–æ–≤ " + new Date(historyArr[i].date * 1000).getMinutes() + " –º–∏–Ω—É—Ç \n\n")
  }
  if(resultHistoryArr.length == 0) {
    bot.sendMessage(msg.chat.id, "–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞",{
      reply_to_message_id: msg.message_id
    })
    return;
  }
  bot.sendMessage(msg.chat.id, resultHistoryArr,{
    reply_to_message_id: msg.message_id
  })
})

function seekNameByID(id) {
    for (let i = 0; i < historyArr.length; i++) {
        if (historyArr[i].answer_id == id) {
            return historyArr[i].answer_name
        }
    }
    return  null
}

bot.onText(/\/rating/, function ratingShow(msg) {
  let rating = groupVotesByUser(userOption) // –ø–æ–ª—É—á–∞–µ—Ç—Å—è { '311805730': 1, '375240230': -1 }
  let result = [];
  for (let id in rating) {
    result.push({
      id: id,
      sum: rating[id]
    });
  } // –ø–æ–ª—É—á–∞–µ—Ç—Å—è  [ { id: '311805730', sum: 1 }, { id: '375240230', sum: -1 } ]
  result.sort(function(a, b) {
    return b.sum - a.sum;
  });

  let message = "";

  for (let i = 0; i < result.length; i++) {
    const id = result[i].id;
    const userName = seekNameByID(id);
    message += i + 1 + ' –º–µ—Å—Ç–æ ' + userName + ":  " + result[i].sum + " üíô \n";
  }
  if (message.length == 0) {
    bot.sendMessage(msg.chat.id, "–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç", {
      reply_to_message_id: msg.message_id
    })
    return
  }
  bot.sendMessage(msg.chat.id, message, {
    reply_to_message_id: msg.message_id
  })
})


let userStatus = [
  {
      gte:0,
      value: '–ù–∏–∫—Ç–æ'
  },
  {
      lte:5,
      value: '–ù–æ–≤–∏—á–µ–∫'
  },
  {
      lte:10,
      value: '–ö–∏–ª–ª–µ—Ä'
  },
  {
      lte:15,
      value: '–ë–æ—Å—Å'
  },
  {
      lte:20,
      value: '–ë–æ–∂–µ–Ω—å–∫–∞'
  },
  {
      eq:6,
      value: '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞'
  }

]

function showUserStatus(statusCount) {
  for(let item of userStatus){
      if(item.hasOwnProperty('gte') && item.gte >= statusCount){
          return item.value
      }
      if(item.hasOwnProperty('lte') && statusCount <= item.lte){
          return item.value
      }
      if(item.hasOwnProperty('eq') && statusCount >= item.eq){
          return item.value
      }
  }
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}


bot.onText(/\/status/, function showRating(msg) {
  let statusCount = 0;                                            //–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (let i = 0; i < historyArr.length; i++) {
    if (msg.from.id === historyArr[i].answer_id) {
      if (historyArr[i].emotions === '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ') statusCount++;
      else statusCount--
    }
  }
  let youStatus = showUserStatus(statusCount)
  bot.sendMessage(msg.chat.id , "–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "+youStatus,{
    reply_to_message_id: msg.message_id
  })

})


bot.onText(/http\S+/, async (msg) => {
  let file_url = msg.text;
  let file_name = url.parse(file_url).pathname.split('/' || '?' || '=' || '#' || '~' || '%' || '&').pop();

  var options = {
    directory: "/home/smedov/Work/Download/",
    filename: file_name,
  }

  const res = await fetch(file_url)
  if (res.headers.get('content-disposition')) {
    const filename = res.headers.get('content-disposition').match(/filename="(.+)?"/)[1]
    options.filename = filename
  }

  download(file_url, options, async function(err) {
    if (err) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏");
    } else await bot.sendDocument(msg.chat.id, options.directory + options.filename,{
      reply_to_message_id: msg.message_id
    })
  })
})




app.get('/rating', function (req, res) {
  rating = groupVotesByUser(userOption);
  let result = [];
  for (let id in rating) {
      result.push({
          id: id,
          sum: rating[id],
          name: seekNameByID(id)
      });
  }
  result.sort(function(a, b) {
      return b.sum - a.sum;
  });
  res.json({
      sortRating: result
  });
});

app.get('/userList', function (req, res) {
  console.log(userList)
    res.json(userList)
});

app.get('/history', function (req, res) {
    res.json(historyArr)
});

app.listen(3000, function () {
    console.log ('–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Ä—Ç: 3000!');
});
