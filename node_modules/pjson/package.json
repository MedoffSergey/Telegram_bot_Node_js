{
  "_from": "pjson",
  "_id": "pjson@1.0.9",
  "_inBundle": false,
  "_integrity": "sha512-4hRJH3YzkUpOlShRzhyxAmThSNnAaIlWZCAb27hd0pVUAXNUAHAO7XZbsPPvsCYwBFEScTmCCL6DGE8NyZ8BdQ==",
  "_location": "/pjson",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "pjson",
    "fetchSpec": "latest",
    "name": "pjson",
    "raw": "pjson",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pjson/-/pjson-1.0.9.tgz",
  "_shasum": "8a9520ce76a4739f8fee91679dad6b065b1c7938",
  "_spec": "pjson",
  "_where": "/Users/serejka/Node JS/Node js/src",
  "author": {
    "email": "serkanyersen@gmail.com",
    "name": "Serkan Yersen",
    "url": "http://serkan.io/"
  },
  "bugs": {
    "url": "https://github.com/serkanyersen/pjson/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Reads package.json regardless of it's path, always finds the root one. Returns an object",
  "devDependencies": {},
  "homepage": "https://github.com/serkanyersen/pjson#readme",
  "keywords": [
    "info",
    "package",
    "package.json",
    "typescript",
    "utility",
    "version"
  ],
  "license": "MIT",
  "main": "pjson.js",
  "name": "pjson",
  "optionalDependencies": {},
  "readme": "# PJSON\n\nPJSON is a simple npm package that let's you read the package.json file.\n\n## Usage\n\nInstall it\n```\nnpm install pjson --save\n```\n\nand use it in your code like this\n\n```javascript\nvar pjson = require('pjson');\n\n// simply access values package.json\nconsole.log(pjson.version);\n```\n\n## Why?\n\nIn Node.js you can already import json files by simple giving their names in the `require` statements but this approach doesn't always work well.  \n\nFirst of all it's path dependend. So if your project has a nested structure you might endup with a code that looks like this\n\n```javascript\nvar pjson = require('../../../package.json');\n```\n\n#### TypeScript\n\nIn typescript you cannot create module definitions for relatively imported things. PJSON resolves this issue for you because you can import it just by name\n\n#### Old versions of Node\n\nImporting JSON files using require is only enabled on late versions of node. For old versions, PJSON is might be useful\n\n#### Because I need it\n\nIt's simple, I needed it for my own project and I though it might be useful for other as well :)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/serkanyersen/pjson.git"
  },
  "types": "pjson.d.ts",
  "typescript": {
    "definition": "pjson.d.ts"
  },
  "version": "1.0.9"
}
