{
  "_from": "domurl",
  "_id": "domurl@2.2.0",
  "_inBundle": false,
  "_integrity": "sha512-HImTLh3nL9tTbM5OvgixJ7wknTiRJXAwk219mMKlE53P71hFNO/rIap2LkOFbDjm/0ivhlXXN3Srq1cdz2zoGg==",
  "_location": "/domurl",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "domurl",
    "fetchSpec": "latest",
    "name": "domurl",
    "raw": "domurl",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/domurl/-/domurl-2.2.0.tgz",
  "_shasum": "b150f0cbbbfcd5bc19e733eb5b59ad0f2d163097",
  "_spec": "domurl",
  "_where": "/Users/serejka/Node JS/Node js/src",
  "bugs": {
    "url": "https://github.com/Mikhus/domurl/issues"
  },
  "bundleDependencies": false,
  "categories": [
    "Utilities"
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Lightweight URL manipulation with JavaScript.",
  "devDependencies": {
    "jscs": "^3.0.7",
    "jshint": "^2.10.1",
    "mocha": "^6.0.2",
    "uglify-js": "^3.4.9"
  },
  "github": "https://github.com/Mikhus/domurl",
  "homepage": "https://github.com/Mikhus/jsurl",
  "jam": {
    "include": [
      "README.md",
      "url.js",
      "url.min.js"
    ],
    "main": "url.min.js"
  },
  "keywords": [
    "querystring",
    "url"
  ],
  "license": "MIT",
  "main": "url.min.js",
  "maintainers": [
    {
      "name": "Mykhailo Stadnyk",
      "email": "mikhus@gmail.com"
    }
  ],
  "name": "domurl",
  "optionalDependencies": {},
  "readme": "# domurl 2.1 (former jsurl) \n[![Build Status](https://travis-ci.org/Mikhus/domurl.svg?branch=master)](https://travis-ci.org/Mikhus/domurl) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/Mikhus/domurl/master/LICENSE)\n\nLightweight URL manipulation with JavaScript for both DOM and server JavaScript.\n\n## Goal\n\nTo have a convenient way working with URLs in JavaScript. From time to time there are usual tasks \nwhen it is required to add or remove some parameters to some basic URL or change some other URL\nparts.\n\nThere is no easy standard way to do it in JavaScript.\n\nThis small library intended to fix that problem\n\n## Supported Browsers\n\nThis library was tested under:\n - IE 7+\n - Chrome 25+\n - Opera 12.15+\n - Firefox 20+\n - Android browser 2.3+\n - NodeJS 0.10+\n\nTheoretically it should work fine with newer or older versions of these browsers, but\nit was not fully tested yet. If you'll find any compatibility issues, please, let me know by\nleaving a bug report here: https://github.com/Mikhus/domurl/issues\n\nYou can run basic tests for your browser here: https://rawgit.com/Mikhus/domurl/master/test/url.html or\nrun test.html from this repository locally. If any test has not been passed, please,\nopen a bug report as described above providing browser and OS version on each test\nwhich has been failed.\n\n## How To Use\n\nFirst of all it is required to include Url class on the page. It can be simply done as\n\n    <script src=\"url.min.js\"></script>\n\nThen any time it's required to do some work over the URL string, it's just required to\ninstantiate the Url object and work with that object instead of initial string. See API\ndescription below to get a clue.\n\n## Install with JAM\n\nIt is possible also to install domurl via JAM repository (http://jamjs.org/).\nCould be simply done as:\n\n    $ jam install domurl\n\n## Install with Bower\n\nIt is also possible now to install domurl using Bower package repository.\nCould be done simply as:\n\n    $ bower install domurl\n    \n## Install with NPM\n\nDomurl is available on NPM and is now works well for both server and browser:\n\n    $ npm install domurl\n\n## API\n\n### Methods:\n\n**Url({string} [url], {boolean} [noTransform]) -> {Url}**\n\nConstructor. If url argument is not passed, current document URL will be used.\nIf second argument bypassed as true value it will try to do no transforms\non a given source URL to keep it form as it was initially given. Otherwise,\nby default, it will try to resolve given URL to an absolute form.\n\n**Url.toString() -> {string}**\n\nConverts URL to string representation. As far as it's special method, any time string\noperations is performed over Url objects this method is automatically called\n\n**Url.paths({Array} [pathStrings])**\n\nReturns Url.path representation as array or sets it via array representation\nif optional array of pathStrings was provided.\n\n**Url.encode({string} urlPart) -> {string}**\n\nPerforms URI-compatible encoding of the given urlPart component. It works **not**\nthe same as native encodeURIComponent()!\n\n**Url.decode({string} encUrlPart) -> {string}**\n\nPerforms decoding of URI-encoded component. It works **not** the same as native\ndecodeURIComponent()!\n\n**Url.clearQuery() -> {Url}**\n\nRemoves all query string parameters from the URL\n\n**Url.queryLength() -> {Number}**\n\nReturns total count of the query string parameters.\n\n**Url.isEmptyQuery() -> {boolean}**\n\nReturns true if query string contains no parameters, false otherwise.\n\n### Properties:\n\n**Url.protocol** - protocol part of URL, everything between the beginning of the URL string \nand \"://\" delimiter (if specified)\n\n**Url.user** - auth user name (if specified)\n\n**Url.pass** - auth user password (if specified)\n\n**Url.host** - host name (if specified)\n\n**Url.port** - port number (if specified)\n\n**Url.path** - document path\n\n**Url.query** - QueryString object. It's a simple Javascript object with automatic string\nmapping. String representation contains everything after \"?\" and to the end of QueryString\n\n**Url.hash** - Anchor part of the URL. Everything after \"#\" and to the end of anchor\n\n## Usage Examples\n\n```javascript\nvar u  = new Url; // curent document URL will be used\n// or we can instantiate as\nvar u2 = new Url( \"http://example.com/some/path?a=b&c=d#someAnchor\");\n// it should support relative URLs also\nvar u3 = new Url( \"/my/site/doc/path?foo=bar#baz\");\n\n// get the value of some query string parameter\nalert( u2.query.a);\n// or\nalert( u3.query[\"foo\"]);\n\n// Manupulating query string parameters\nu.query.a = [1, 2, 3]; // adds/replaces in query string params a=1&a=2&a=3\nu.query.b = 'woohoo';  // adds/replaces in query string param b=woohoo\n\nif (u.query.a instanceof Array) { // the way to add a parameter\n  u.query.a.push(4); // now it's \"a=1&a=2&a=3&a=4&b=woohoo\"\n}\n\nelse { // if not an array but scalar value here is a way how to convert to array\n  u.query.a = [u.query.a];\n  u.query.a.push(8)\n}\n\n// The way to remove the parameter:\ndelete u.query.a\n// or:\ndelete u.query[\"a\"]\n\n// If you need to remove all query string params:\nu.clearQuery();\nalert( u);\n\n// Lookup URL parts:\nalert(\n    'protocol = ' + u.protocol + '\\n' +\n    'user = ' + u.user + '\\n' +\n    'pass = ' + u.pass + '\\n' +\n    'host = ' + u.host + '\\n' +\n    'port = ' + u.port + '\\n' +\n    'path = ' + u.path + '\\n' +\n    'query = ' + u.query + '\\n' +\n    'hash = ' + u.hash\n);\n\n// Manipulating URL parts\nu.path = '/some/new/path'; // the way to change URL path\nconsole.log(u.paths());\nu.paths(['some', 'new', 'path']); // change path by array of strings\nconsole.log(u.path);\nu.protocol = 'https' // the way to force https protocol on the source URL\n\n// inject into string\nvar str = '<a href=\"' + u + '\">My Cool Link</a>';\n\n// or use in DOM context\nvar a = document.createElement('a');\na.href = u;\na.innerHTML = 'test';\ndocument.body.appendChild( a);\n\n// Stringify\nu += '';\nString(u);\nu.toString();\n// NOTE, that usually it will be done automatically, so only in special\n//       cases direct stringify is required\n```\n\n## License\n\nThis code is available under MIT license. Feel free to do what you want.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Mikhus/domurl.git"
  },
  "scripts": {
    "minify": "./node_modules/uglify-js/bin/uglifyjs url.js --output url.min.js --compress --mangle",
    "test": "mocha ./test/url.js"
  },
  "url": {
    "bugs": "https://github.com/Mikhus/domurl/issues"
  },
  "version": "2.2.0"
}
